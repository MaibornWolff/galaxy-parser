Changelog for updating the expression mappings

New syntax nodes:

Name:;Added to language(s):
"record_struct_declaration";cs
"and_pattern";cs
"define_directive";cs
"elif_directive";cs
"else_directive";cs
"endregion_directive";cs
"error_directive";cs
"expression_colon";cs
"file_scoped_namespace_declaration";cs
"if_directive";cs
"line_directive";cs
"nullable_directive";cs
"or_pattern";cs
"pragma_directive";cs
"region_directive";cs
"slice_pattern";cs
"undef_directive";cs
"warning_directive";cs
"endif_directive";cs
"preproc_integer_literal";cs
"preproc_message";cs
"preproc_string_literal";cs
"iota";go
"negated_type";go
"literal_element";go
"struct_elem";go
"struct_term";go
"block_comment";java
"line_comment";java,kt
"exports_module_directive";java
"opens_module_directive";java
"provides_module_directive";java
"requires_module_directive";java
"uses_module_directive";java
"template_expression";java
"compact_constructor_declaration";java
"condition";java
"guard";java
"multiline_string_fragment";java
"permits";java
"record_pattern";java
"record_pattern_body";java
"record_pattern_component";java
"string_interpolation";java
"switch_block_statement_group";java
"switch_rule";java
"type_list";java,php
"string_fragment";java,js,ts
"underscore_pattern";java
"glimmer_template";js,ts
"class_static_block";js,ts
"field_definition";js
"glimmer_closing_tag";js,ts
"glimmer_opening_tag";js,ts
"namespace_export";js,ts
"optional_chain";js,ts
"private_property_identifier";js,ts
"character_escape_seq";kt
"function_value_parameters";kt
"getter";kt
"import_list";kt
"multi_variable_declaration";kt
"not_nullable_type";kt
"multiline_comment";kt
"match_expression";php
"reference_assignment_expression";php
"encapsed_string";php
"nowdoc";php
"nullsafe_member_access_expression";php
"nullsafe_member_call_expression";php
"abstract_modifier";php
"attribute_group";php
"by_ref";php
"enum_case";php
"enum_declaration_list";php
"final_modifier";php
"heredoc_body";php
"match_block";php
"match_condition_list";php
"match_conditional_expression";php
"match_default_expression";php
"named_type";php
"nowdoc_body";php
"property_promotion_parameter";php
"readonly_modifier";php
"reference_modifier";php
"variadic_placeholder";php
"bottom_type";php
"heredoc_end";php
"heredoc_start";php
"nowdoc_string";php
"string_value";php
"template_literal_type";ts
"this_type";ts
"instantiation_expression";ts
"satisfies_expression";ts
"asserts_annotation";ts
"extends_type_clause";ts
"override_modifier";ts
"match_statement";py
"type_alias_statement";py
"as_pattern";py
"keyword_separator";py
"positional_separator";py
"case_clause";py
"case_pattern";py
"class_pattern";py
"complex_pattern";py
"constrained_type";py
"dict_pattern";py
"except_group_clause";py
"keyword_pattern";py
"member_type";py
"splat_pattern";py
"splat_type";py
"string_content";py,cpp
"union_pattern";py
"escape_interpolation";py
"line_continuation";py
"string_end";py
"string_start";py
"alignof_expression";cpp
"fold_expression";cpp
"generic_expression";cpp
"gnu_asm_expression";cpp
"offsetof_expression";cpp
"requires_clause";cpp
"requires_expression";cpp
"placeholder_type_specifier";cpp
"alignas_specifier";cpp
"binary_expression_bitand";cpp
"binary_expression_bitor";cpp
"binary_expression_not_eq";cpp
"compound_requirement";cpp
"concept_definition";cpp
"constraint_conjunction";cpp
"constraint_disjunction";cpp
"gnu_asm_clobber_list";cpp
"gnu_asm_goto_list";cpp
"gnu_asm_input_operand";cpp
"gnu_asm_input_operand_list";cpp
"gnu_asm_output_operand";cpp
"gnu_asm_output_operand_list";cpp
"gnu_asm_qualifier";cpp
"init_statement";cpp
"nested_namespace_specifier";cpp
"pointer_type_declarator";cpp
"preproc_elifdef";cpp
"requirement_seq";cpp
"simple_requirement";cpp
"subscript_argument_list";cpp
"type_requirement";cpp
"character";cpp
"raw_string_content";cpp
"raw_string_delimiter";cpp

Removed syntax nodes:

Name:;Was present in language(s):;Used for calculating the metric(s):;Was explicitly only activated for language(s):
"binary_pattern";cs;;
"parameter_array";cs;;
"preprocessor_call";cs;;
"!";cs,go,java,js,kt,php,ts,cpp;;
"!=";cs,go,java,js,kt,php,ts,py,cpp;;
"""";cs,go,js,kt,ts,py,cpp;;
"""""";cs,cpp;;
"$""";cs;;
"$@""";cs;;
"%";cs,go,java,js,kt,php,ts,py,cpp;;
"%=";cs,go,java,js,kt,php,ts,py,cpp;;
"&";cs,go,java,js,php,ts,py,cpp;;
"&&";cs,go,java,js,kt,php,ts,cpp;;
"&=";cs,go,java,js,php,ts,py,cpp;;
"'";cs,js,kt,ts,cpp;;
"(";cs,go,java,js,kt,php,ts,py,cpp;;
")";cs,go,java,js,kt,php,ts,py,cpp;;
"*";cs,go,java,js,kt,php,ts,py,cpp;;
"*=";cs,go,java,js,kt,php,ts,py,cpp;;
"+";cs,go,java,js,kt,php,ts,py,cpp;;
"++";cs,go,java,js,kt,php,ts,cpp;;
"+=";cs,go,java,js,kt,php,ts,py,cpp;;
",";cs,go,java,js,kt,php,ts,py,cpp;;
"-";cs,go,java,js,kt,php,ts,py,cpp;;
"--";cs,go,java,js,kt,php,ts,cpp;;
"-=";cs,go,java,js,kt,php,ts,py,cpp;;
"->";cs,java,kt,php,py,cpp;;
".";cs,go,java,js,kt,php,ts,py,cpp;;
"..";cs,kt;;
"/";cs,go,java,js,kt,php,ts,py,cpp;;
"/=";cs,go,java,js,kt,php,ts,py,cpp;;
":";cs,go,java,js,kt,php,ts,py,cpp;;
"::";cs,java,kt,php,cpp;;
"<";cs,go,java,js,kt,php,ts,py,cpp;;
"<<";cs,go,java,js,php,ts,py,cpp;;
"<<=";cs,go,java,js,php,ts,py,cpp;;
"<=";cs,go,java,js,kt,php,ts,py,cpp;;
"=";cs,go,java,js,kt,php,ts,py,cpp;;
"==";cs,go,java,js,kt,php,ts,py,cpp;;
"=>";cs,js,php,ts;;
">";cs,go,java,js,kt,php,ts,py,cpp;;
">=";cs,go,java,js,kt,php,ts,py,cpp;;
">>";cs,go,java,js,php,ts,py,cpp;;
">>=";cs,go,java,js,php,ts,py,cpp;;
"?";cs,java,js,php,ts,cpp;;
"??";cs,js,php,ts;;
"??=";cs,js,ts;;
"@$""";cs;;
"Cdecl";cs;;
"Fastcall";cs;;
"Stdcall";cs;;
"Thiscall";cs;;
"[";cs,go,java,js,kt,php,ts,py,cpp;;
"]";cs,go,java,js,kt,php,ts,py,cpp;;
"^";cs,go,java,js,php,ts,py,cpp;;
"^=";cs,go,java,js,php,ts,py,cpp;;
"__makeref";cs;;
"__reftype";cs;;
"__refvalue";cs;;
"abstract";cs,java,kt,php,ts;;
"add";cs;;
"alias";cs;;
"and";cs,php,py;;
"as";cs,js,kt,php,ts,py;;
"ascending";cs;;
"assembly";cs;;
"async";cs,js,ts,py;;
"base";cs;;
"break";cs,go,java,js,kt,php,ts,py,cpp;;
"by";cs,kt;;
"case";cs,go,java,js,php,ts,cpp;;
"catch";cs,java,js,kt,php,ts,cpp;;
"checked";cs;;
"const";cs,go,js,php,ts,cpp;;
"continue";cs,go,java,js,kt,php,ts,py,cpp;;
"default";cs,go,java,js,php,ts,cpp;;
"delegate";cs,kt;;
"descending";cs;;
"do";cs,java,js,kt,php,ts,cpp;;
"dynamic";cs,kt;;
"else";cs,go,java,js,kt,php,ts,py,cpp;;
"enum";cs,java,kt,ts,cpp;;
"equals";cs;;
"event";cs;;
"explicit";cs,cpp;;
"extern";cs,cpp;;
"field";cs,kt;;
"finally";cs,java,js,kt,php,ts,py;;
"fixed";cs;;
"for";cs,go,java,js,kt,php,ts,py,cpp;;
"foreach";cs,php;;
"from";cs,js,php,ts,py;;
"get";cs,js,kt,ts;;
"goto";cs,go,php,cpp;;
"group";cs;;
"if";cs,go,java,js,kt,php,ts,py,cpp;;
"implicit";cs;;
"in";cs,js,kt,ts,py;;
"init";cs,kt;;
"interface";cs,go,java,kt,php,ts;;
"internal";cs,kt;;
"into";cs;;
"is";cs,kt,ts,py;;
"join";cs;;
"let";cs,js,ts;;
"lock";cs;;
"managed";cs;;
"method";cs;;
"nameof";cs;;
"namespace";cs,php,ts,cpp;;
"new";cs,java,js,php,ts,cpp;;
"not";cs,py;;
"notnull";cs;;
"on";cs;;
"operator";cs,kt,cpp;;
"or";cs,php,py;;
"orderby";cs;;
"out";cs,kt;;
"override";cs,kt,cpp;;
"param";cs,kt;;
"params";cs;;
"partial";cs;;
"preprocessor_directive";cs;;
"private";cs,java,kt,php,ts,cpp;;
"property";cs,kt;;
"protected";cs,java,kt,php,ts,cpp;;
"public";cs,java,kt,php,ts,cpp;;
"readonly";cs,ts;;
"record";cs;;
"ref";cs;;
"remove";cs;;
"return";cs,go,java,js,kt,php,ts,py,cpp;;
"sealed";cs,kt;;
"select";cs,go;;
"sizeof";cs,cpp;;
"stackalloc";cs;;
"static";cs,java,js,php,ts,cpp;;
"struct";cs,go,cpp;;
"switch";cs,go,java,js,php,ts,cpp;;
"throw";cs,java,js,kt,php,ts,cpp;;
"try";cs,java,js,kt,php,ts,py,cpp;;
"typeof";cs,js,ts;;
"unchecked";cs;;
"unmanaged";cs;;
"unsafe";cs;;
"using";cs,cpp;;
"var";cs,go,js,kt,ts;;
"volatile";cs,java,cpp;;
"when";cs,kt;;
"where";cs,kt;;
"while";cs,java,js,kt,php,ts,py,cpp;;
"with";cs,java,js,ts,py;;
"{";cs,go,java,js,kt,php,ts,py,cpp;;
"{{";cs,py;;
"|";cs,go,java,js,php,ts,py,cpp;;
"|=";cs,go,java,js,php,ts,py,cpp;;
"||";cs,go,java,js,kt,php,ts,cpp;;
"}";cs,go,java,js,kt,php,ts,py,cpp;;
"~";cs,java,js,php,ts,py,cpp;;
"element";go;;
"method_spec_list";go;;
"\n";go,cpp;;
"&^";go;;
"&^=";go;;
"...";go,java,js,php,ts,cpp;;
":=";go,py;;
"<-";go;;
"chan";go;;
"defer";go;;
"fallthrough";go;;
"func";go;;
"go";go;;
"map";go;;
"package";go,java,kt;;
"range";go;;
"interface_type_list";java;;
">>>";java,js,ts;;
">>>=";java,js,ts;;
"@";java,js,kt,php,ts,py;;
"@interface";java;;
"assert";java,py;;
"byte";java;;
"char";java;;
"double";java,php;;
"exports";java;;
"extends";java,js,php,ts;;
"final";java,kt,php,cpp;;
"implements";java,php,ts;;
"instanceof";java,js,php,ts;;
"int";java,php;;
"long";java,cpp;;
"native";java;;
"open";java,kt;;
"opens";java;;
"provides";java;;
"requires";java;;
"short";java,cpp;;
"strictfp";java;;
"synchronized";java;;
"to";java;;
"transient";java;;
"transitive";java;;
"uses";java;;
"jsx_fragment";js,ts;;
"!==";js,kt,php,ts;;
"${";js,kt,ts;;
"&&=";js,ts;;
"**";js,php,ts,py;;
"**=";js,php,ts,py;;
"===";js,kt,php,ts;;
"?.";js,ts;;
"`";js,ts;;
"debugger";js,ts;;
"delete";js,ts,cpp;;
"export";js,ts;;
"of";js,ts;;
"target";js,ts;;
"void";js,php,ts;;
"||=";js,ts;;
"line_string_literal";kt;;
"multi_line_string_literal";kt;;
"!!";kt;;
"!in";kt;;
"""""""";kt;;
"#!";kt;;
"$";kt,php;;
".*";kt;;
"?:";kt,ts;;
"L";kt;;
"\";kt,php;;
"actual";kt;;
"as?";kt;;
"break@";kt;;
"companion";kt;;
"constructor";kt;;
"continue@";kt;;
"crossinline";kt;;
"data";kt;;
"expect";kt;;
"external";kt;;
"file";kt;;
"fun";kt;;
"infix";kt;;
"inline";kt,cpp;;
"inner";kt;;
"lateinit";kt;;
"noinline";kt;;
"receiver";kt;;
"return@";kt;;
"setparam";kt;;
"super@";kt;;
"suspend";kt;;
"tailrec";kt;;
"this@";kt;;
"typealias";kt;;
"u";kt;;
"val";kt;;
"vararg";kt;;
"type_name";php;;
".=";php;;
"<=>";php;;
"<>";php,py;;
"?>";php;;
"binary";php;;
"bool";php;;
"callable";php;;
"clone";php;;
"declare";php,ts;;
"echo";php;;
"elseif";php;;
"encoding";php;;
"enddeclare";php;;
"endfor";php;;
"endforeach";php;;
"endif";php;;
"endswitch";php;;
"endwhile";php;;
"include";php;;
"include_once";php;;
"insteadof";php;;
"iterable";php;;
"parent";php;;
"print";php,py;;
"real";php;;
"require";php,ts;;
"require_once";php;;
"self";php;;
"strict_types";php;;
"ticks";php;;
"trait";php;;
"unset";php;;
"use";php;;
"xor";php;;
"-?:";ts;;
"any";ts;;
"infer";ts;;
"keyof";ts;;
"symbol";ts;;
"{|";ts;;
"|}";ts;;
"//";py;;
"//=";py;;
"@=";py;;
"__future__";py;;
"def";py;;
"del";py;;
"elif";py;;
"except";py;;
"exec";py;;
"nonlocal";py;;
"pass";py;;
"raise";py;;
"}}";py;;
"nullptr";cpp;;
"namespace_definition_name";cpp;;
"virtual_function_specifier";cpp;;
"#define";cpp;;
"#elif";cpp;;
"#else";cpp;;
"#endif";cpp;;
"#if";cpp;;
"#ifdef";cpp;;
"#ifndef";cpp;;
"#include";cpp;;
"()";cpp;;
"->*";cpp;;
"L""";cpp;;
"L'";cpp;;
"U""";cpp;;
"U'";cpp;;
"[[";cpp;;
"[]";cpp;;
"]]";cpp;;
"_Atomic";cpp;;
"__attribute__";cpp;;
"__based";cpp;;
"__cdecl";cpp;;
"__clrcall";cpp;;
"__declspec";cpp;;
"__fastcall";cpp;;
"__stdcall";cpp;;
"__thiscall";cpp;;
"__unaligned";cpp;;
"__vectorcall";cpp;;
"_unaligned";cpp;;
"co_await";cpp;;
"co_return";cpp;;
"co_yield";cpp;;
"constexpr";cpp;;
"defined";cpp;;
"friend";cpp;;
"mutable";cpp;;
"register";cpp;;
"restrict";cpp;;
"signed";cpp;;
"static_assert";cpp;;
"template";cpp;;
"thread_local";cpp;;
"typedef";cpp;;
"typename";cpp;;
"u""";cpp;;
"u'";cpp;;
"u8""";cpp;;
"u8'";cpp;;
"union";cpp;;
"unsigned";cpp;;

Already known and still used syntax nodes which were removed from or added to some language(s):

Name:;Added to language(s):;Removed from language(s):;Remains in language(s):;Used for calculating the metric(s):;Was explicitly only activated for language(s):
"list_pattern";cs;;py;;
"label_name";;cs;go;;
";";;cs,go,js,kt,php,ts,py,cpp;java;;
"await";;cs,js,ts;py;;
"class";;cs,java,kt,php,py,cpp;js,ts;;
"false";;cs,kt;go,java,js,ts,py,cpp;;
"module";;cs,java;ts,py;lines_of_code,real_lines_of_code;py
"set";;cs,js,kt,ts;py;;
"this";;cs,kt;java,js,ts,cpp;;
"true";;cs,kt;go,java,js,ts,py,cpp;;
"type";;cs,go,ts;py;;
"virtual";;cs;cpp;;
"yield";;cs,js,php,ts;py;;
"expression_statement";go;;cs,java,js,php,ts,py,cpp;;
"generic_type";go,py;;java,ts;;
"union_type";go,php,py;;ts;;
"type_arguments";go;;java,kt,ts;;
"type_parameter_list";go;;cs;;
"import";;go,java,kt,py;js,ts;;
"record_declaration";java;;cs;;
"switch_expression";java;;cs;;
"yield_statement";java;;cs;;
"pattern";java;;js,ts,py;;
"type_pattern";java;;cs;;
"escape_sequence";java,php;;cs,go,js,ts,py,cpp;;
"switch_statement";;java;cs,js,php,ts,cpp;;
"float";;java;php,py;;
"nested_identifier";;js;ts;;
"public_field_definition";;js;ts;;
"string_literal";kt;;cs,java,cpp;;
"comment";;kt;cs,go,java,js,php,ts,py,cpp;comment_lines,real_lines_of_code;
"super";;kt;java,js,ts;;
"null";;kt;js,php,ts,cpp;;
"object";;kt,php;js,ts;;
"arrow_function";php;;js,ts;complexity,functions;
"throw_expression";php;;cs;complexity;
"enum_declaration";php;;cs,java,ts;classes;
"intersection_type";php;;ts;;
"argument";php;;cs;;
"attribute";php;;cs,py,cpp;;
"attribute_list";php;;cs;;
"binary_expression_??";php;;cs,js,ts;complexity;
"global";;php,ts,py;cs;;
"throw_statement";;php;cs,java,js,ts,cpp;complexity;
"array";;php;js,ts;;
"class_modifier";;php;kt;;
"list";;php;py;;
"template_type";ts;;cpp;;
"boolean";;ts;php;;
"type_parameter";py;;cs,java,kt,ts;;
"binary_expression_&";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_*";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_+";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_-";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_/";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_<";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_<<";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_<=";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_==";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_>";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_>=";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_>>";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_^";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_|";;py;cs,go,java,js,php,ts,cpp;;
"binary_expression_%";cpp;;cs,go,java,js,php,ts;;
"binary_expression_<=>";cpp;;php;;
"binary_expression_and";cpp;;php;complexity;
"binary_expression_or";cpp;;php;complexity;
"binary_expression_xor";cpp;;php;complexity;
"else_clause";cpp;;js,php,ts,py;;
"variadic_parameter";cpp;;php;;
