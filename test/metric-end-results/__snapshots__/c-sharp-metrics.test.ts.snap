// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for delegate 1`] = `
{
  "metrics": Map {
    "DelegateFile.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Program.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "DelegateNamespace.MyDelegate",
      "toFile": "DelegateFile.cs",
      "toTypeName": "MyDelegate",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for enums 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "ClassB.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Main.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 2,
    },
  },
  "relationships": [
    {
      "fromTypeName": "Program",
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "toTypeName": "EnumClass",
      "toFQTN": "NamespaceEnumA.EnumClass",
      "toFile": "ClassA.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "Program",
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "toTypeName": "DaysOfWeekB",
      "toFQTN": "NamespaceEnumB.DaysOfWeekB",
      "toFile": "ClassB.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "Program",
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "toTypeName": "DaysOfWeek",
      "toFQTN": "NamespaceEnumA.EnumClass.DaysOfWeek",
      "toFile": "ClassA.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for extended class 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "ClassB.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Main.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "fromTypeName": "Program",
      "toFQTN": "NamespaceA.ClassA",
      "toFile": "ClassA.cs",
      "toTypeName": "ClassA",
      "usageType": "usage",
    },
    {
      "fromFQTN": "NamespaceA.ClassA",
      "fromFile": "ClassA.cs",
      "fromTypeName": "ClassA",
      "toFQTN": "NamespaceB.ClassB",
      "toFile": "ClassB.cs",
      "toTypeName": "ClassB",
      "usageType": "extends",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for generics 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "ClassB.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 2,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "ClassC.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "ClassD.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "GenericClass.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "Program.cs" => {
      "coupling_between_objects": 4,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 4,
    },
  },
  "relationships": [
    {
      "fromTypeName": "Program",
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Program.cs",
      "toTypeName": "ClassA",
      "toFQTN": "ClassANamespace.ClassA",
      "toFile": "ClassA.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "ClassD",
      "fromFQTN": "ClassDNamespace.ClassD",
      "fromFile": "ClassD.cs",
      "toTypeName": "ClassB",
      "toFQTN": "ClassBNamespace.ClassB",
      "toFile": "ClassB.cs",
      "usageType": "extends",
    },
    {
      "fromTypeName": "Program",
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Program.cs",
      "toTypeName": "ClassC",
      "toFQTN": "ClassCNamespace.ClassC",
      "toFile": "ClassC.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "Program",
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Program.cs",
      "toTypeName": "ClassD",
      "toFQTN": "ClassDNamespace.ClassD",
      "toFile": "ClassD.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "Program",
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Program.cs",
      "toTypeName": "GenericClass",
      "toFQTN": "GenericClassNamespace.GenericClass",
      "toFile": "GenericClass.cs",
      "usageType": "usage",
    },
    {
      "fromTypeName": "GenericClass",
      "fromFQTN": "GenericClassNamespace.GenericClass",
      "fromFile": "GenericClass.cs",
      "toTypeName": "ClassB",
      "toFQTN": "ClassBNamespace.ClassB",
      "toFile": "ClassB.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for global classes without namespace 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Program.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromTypeName": "NoNamespaceDefinition",
      "fromFQTN": "NoNamespaceDefinition",
      "fromFile": "Program.cs",
      "toTypeName": "ClassA",
      "toFQTN": "ClassA",
      "toFile": "ClassA.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for global namespaces without import 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Program.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromTypeName": "NoImport",
      "fromFQTN": "NoImport",
      "fromFile": "Program.cs",
      "toTypeName": "ClassA",
      "toFQTN": "NamespaceA.ClassA",
      "toFile": "ClassA.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for interface 1`] = `
{
  "metrics": Map {
    "Programm.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
    "TheInterfaceFile.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
  },
  "relationships": [
    {
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Programm.cs",
      "fromTypeName": "Program",
      "toFQTN": "theInterfaceNamespace.TheInterface",
      "toFile": "TheInterfaceFile.cs",
      "toTypeName": "TheInterface",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for multiple method calls 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Program.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "mainNamespace.MultipleMethodCalls",
      "fromFile": "Program.cs",
      "fromTypeName": "MultipleMethodCalls",
      "toFQTN": "NamespaceA.ClassA",
      "toFile": "ClassA.cs",
      "toTypeName": "ClassA",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for multiple types in a file 1`] = `
{
  "metrics": Map {
    "ImplementedClassFile.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Programm.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "mainNamespace.ClassAsReturnType",
      "fromFile": "Programm.cs",
      "fromTypeName": "ClassAsReturnType",
      "toFQTN": "implementClassNamespace.ImplementClass",
      "toFile": "ImplementedClassFile.cs",
      "toTypeName": "ImplementClass",
      "usageType": "usage",
    },
    {
      "fromFQTN": "mainNamespace.DoThing",
      "fromFile": "Programm.cs",
      "fromTypeName": "DoThing",
      "toFQTN": "implementClassNamespace.ImplementClass",
      "toFile": "ImplementedClassFile.cs",
      "toTypeName": "ImplementClass",
      "usageType": "usage",
    },
    {
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Programm.cs",
      "fromTypeName": "Program",
      "toFQTN": "implementClassNamespace.ImplementClass",
      "toFile": "ImplementedClassFile.cs",
      "toTypeName": "ImplementClass",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for nested folder structure 1`] = `
{
  "metrics": Map {
    "BlubController.cs" => {
      "coupling_between_objects": 3,
      "incoming_dependencies": 2,
      "instability": 0.3333333333333333,
      "outgoing_dependencies": 1,
    },
    "Library\\FunctionCalls.cs" => {
      "coupling_between_objects": 4,
      "incoming_dependencies": 2,
      "instability": 0.5,
      "outgoing_dependencies": 2,
    },
    "Library\\IAnotherParameterTypes.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Library\\IParameterTypes.cs" => {
      "coupling_between_objects": 3,
      "incoming_dependencies": 2,
      "instability": 0.3333333333333333,
      "outgoing_dependencies": 1,
    },
    "Library\\MyCustomArgumentNullException.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Library\\ObjectCreations.cs" => {
      "coupling_between_objects": 5,
      "incoming_dependencies": 1,
      "instability": 0.8,
      "outgoing_dependencies": 4,
    },
    "Library\\ParameterTypes.cs" => {
      "coupling_between_objects": 5,
      "incoming_dependencies": 3,
      "instability": 0.4,
      "outgoing_dependencies": 2,
    },
    "Library\\ParameterTypesSpecialized.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 2,
    },
  },
  "relationships": [
    {
      "fromFQTN": "App.CouplingExamples.Library.ParameterTypes",
      "fromFile": "Library\\ParameterTypes.cs",
      "fromTypeName": "ParameterTypes",
      "toFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "toFile": "Library\\FunctionCalls.cs",
      "toTypeName": "FunctionCalls",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamplesOne.BlubControllerOne1",
      "fromFile": "BlubController.cs",
      "fromTypeName": "BlubControllerOne1",
      "toFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "toFile": "Library\\FunctionCalls.cs",
      "toTypeName": "FunctionCalls",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamplesOne.BlubControllerOne2",
      "fromFile": "BlubController.cs",
      "fromTypeName": "BlubControllerOne2",
      "toFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "toFile": "Library\\FunctionCalls.cs",
      "toTypeName": "FunctionCalls",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamplesTwo.BlubControllerTwo1",
      "fromFile": "BlubController.cs",
      "fromTypeName": "BlubControllerTwo1",
      "toFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "toFile": "Library\\FunctionCalls.cs",
      "toTypeName": "FunctionCalls",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamplesTwo.BlubControllerTwo2",
      "fromFile": "BlubController.cs",
      "fromTypeName": "BlubControllerTwo2",
      "toFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "toFile": "Library\\FunctionCalls.cs",
      "toTypeName": "FunctionCalls",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.IParameterTypes",
      "fromFile": "Library\\IParameterTypes.cs",
      "fromTypeName": "IParameterTypes",
      "toFQTN": "App.CouplingExamples.Library.IAnotherParameterTypes",
      "toFile": "Library\\IAnotherParameterTypes.cs",
      "toTypeName": "IAnotherParameterTypes",
      "usageType": "implements",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamples.Library.IParameterTypes",
      "toFile": "Library\\IParameterTypes.cs",
      "toTypeName": "IParameterTypes",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ParameterTypesSpecialized",
      "fromFile": "Library\\ParameterTypesSpecialized.cs",
      "fromTypeName": "ParameterTypesSpecialized",
      "toFQTN": "App.CouplingExamples.Library.IParameterTypes",
      "toFile": "Library\\IParameterTypes.cs",
      "toTypeName": "IParameterTypes",
      "usageType": "implements",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamples.Library.MyCustomArgumentNullException",
      "toFile": "Library\\MyCustomArgumentNullException.cs",
      "toTypeName": "MyCustomArgumentNullException",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ParameterTypes",
      "fromFile": "Library\\ParameterTypes.cs",
      "fromTypeName": "ParameterTypes",
      "toFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "toFile": "Library\\ObjectCreations.cs",
      "toTypeName": "ObjectCreations",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "fromFile": "Library\\FunctionCalls.cs",
      "fromTypeName": "FunctionCalls",
      "toFQTN": "App.CouplingExamples.Library.ParameterTypes",
      "toFile": "Library\\ParameterTypes.cs",
      "toTypeName": "ParameterTypes",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamples.Library.ParameterTypes",
      "toFile": "Library\\ParameterTypes.cs",
      "toTypeName": "ParameterTypes",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ParameterTypesSpecialized",
      "fromFile": "Library\\ParameterTypesSpecialized.cs",
      "fromTypeName": "ParameterTypesSpecialized",
      "toFQTN": "App.CouplingExamples.Library.ParameterTypes",
      "toFile": "Library\\ParameterTypes.cs",
      "toTypeName": "ParameterTypes",
      "usageType": "extends",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "fromFile": "Library\\FunctionCalls.cs",
      "fromTypeName": "FunctionCalls",
      "toFQTN": "App.CouplingExamplesOne.BlubControllerOne1",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerOne1",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamplesOne.BlubControllerOne1",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerOne1",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "fromFile": "Library\\FunctionCalls.cs",
      "fromTypeName": "FunctionCalls",
      "toFQTN": "App.CouplingExamplesOne.BlubControllerOne2",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerOne2",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamplesOne.BlubControllerOne2",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerOne2",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.FunctionCalls",
      "fromFile": "Library\\FunctionCalls.cs",
      "fromTypeName": "FunctionCalls",
      "toFQTN": "App.CouplingExamplesTwo.BlubControllerTwo1",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerTwo1",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamplesTwo.BlubControllerTwo1",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerTwo1",
      "usageType": "usage",
    },
    {
      "fromFQTN": "App.CouplingExamples.Library.ObjectCreations",
      "fromFile": "Library\\ObjectCreations.cs",
      "fromTypeName": "ObjectCreations",
      "toFQTN": "App.CouplingExamplesTwo.BlubControllerTwo2",
      "toFile": "BlubController.cs",
      "toTypeName": "BlubControllerTwo2",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for static class using 1`] = `
{
  "metrics": Map {
    "ClassA_And_B.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Main.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromTypeName": "Program",
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "toTypeName": "ClassB",
      "toFQTN": "StaticUsedNamespace.ClassB",
      "toFile": "ClassA_And_B.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for static method call in for loop 1`] = `
{
  "metrics": Map {
    "ClassA.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "ClassB.cs" => {
      "coupling_between_objects": 3,
      "incoming_dependencies": 2,
      "instability": 0.3333333333333333,
      "outgoing_dependencies": 1,
    },
    "ClassC.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 2,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Program.cs" => {
      "coupling_between_objects": 3,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 3,
    },
  },
  "relationships": [
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "ClassANamespace.ClassA",
      "toFile": "ClassA.cs",
      "toTypeName": "ClassA",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ClassANamespace.ClassA",
      "fromFile": "ClassA.cs",
      "fromTypeName": "ClassA",
      "toFQTN": "ClassBNamespace.ClassB",
      "toFile": "ClassB.cs",
      "toTypeName": "ClassB",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "ClassBNamespace.ClassB",
      "toFile": "ClassB.cs",
      "toTypeName": "ClassB",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ClassBNamespace.ClassB",
      "fromFile": "ClassB.cs",
      "fromTypeName": "ClassB",
      "toFQTN": "ClassCNamespace.ClassC",
      "toFile": "ClassC.cs",
      "toTypeName": "ClassC",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "ClassCNamespace.ClassC",
      "toFile": "ClassC.cs",
      "toTypeName": "ClassC",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for static system.console.writeline using 1`] = `
{
  "metrics": Map {
    "System.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "Main.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromTypeName": "Program",
      "fromFQTN": "Programm.Program",
      "fromFile": "Main.cs",
      "toTypeName": "Console",
      "toFQTN": "System.Console",
      "toFile": "System.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for static using 1`] = `
{
  "metrics": Map {
    "Classes.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
    "ProgramFile.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
        "fromTypeName": "ProgramClass",
        "fromFQTN": "ProgramNamespace.ProgramClass",
        "fromFile": "ProgramFile.cs",
        "toTypeName": "ClassA",
        "toFQTN": "StaticUsedNamespace.ClassA",
        "toFile": "Classes.cs",
        "usageType": "usage",
    },
    {
      "fromTypeName": "ProgramClass",
      "fromFQTN": "ProgramNamespace.ProgramClass",
      "fromFile": "ProgramFile.cs",
      "toTypeName": "ClassB",
      "toFQTN": "NormalUsedNamespace.ClassB",
      "toFile": "Classes.cs",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for struct 1`] = `
{
  "metrics": Map {
    "Program.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
    "StructFile.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
  },
  "relationships": [
    {
      "fromFQTN": "CsharpStruct.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "StructNamespace.Employee",
      "toFile": "StructFile.cs",
      "toTypeName": "Employee",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for two namespace containing the same class name 1`] = `
{
  "metrics": Map {
    "Programm.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 1,
    },
    "TwoNamespaceWithSameClassName.cs" => {
      "coupling_between_objects": 1,
      "incoming_dependencies": 1,
      "instability": 0,
      "outgoing_dependencies": 0,
    },
  },
  "relationships": [
    {
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Programm.cs",
      "fromTypeName": "Program",
      "toFQTN": "NumberOne.SameClass",
      "toFile": "TwoNamespaceWithSameClassName.cs",
      "toTypeName": "SameClass",
      "usageType": "usage",
    },
    {
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Programm.cs",
      "fromTypeName": "Program",
      "toFQTN": "NumberTwo.SameClass",
      "toFile": "TwoNamespaceWithSameClassName.cs",
      "toTypeName": "SameClass",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for usage of class in the same file 1`] = `
{
  "metrics": Map {
    "Program.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "mainNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "mainNamespace.DoThing",
      "toFile": "Program.cs",
      "toTypeName": "DoThing",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for usage of delegates in class in the same file 1`] = `
{
  "metrics": Map {
    "Program.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "DelegateNamespace.Mainy",
      "fromFile": "Program.cs",
      "fromTypeName": "Mainy",
      "toFQTN": "DelegateNamespace.MyDelegate",
      "toFile": "Program.cs",
      "toTypeName": "MyDelegate",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > for usage of interface in class method in the same file 1`] = `
{
  "metrics": Map {
    "ClassToInterface.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "Program.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
  },
  "relationships": [
    {
      "fromFQTN": "ClassToInterfaceNamespace.OtherProgram",
      "fromFile": "ClassToInterface.cs",
      "fromTypeName": "OtherProgram",
      "toFQTN": "ClassToInterfaceNamespace.MyInterface",
      "toFile": "ClassToInterface.cs",
      "toTypeName": "MyInterface",
      "usageType": "usage",
    },
    {
      "fromFQTN": "mainNamespace.FirstInterface",
      "fromFile": "Program.cs",
      "fromTypeName": "FirstInterface",
      "toFQTN": "mainNamespace.SecondInterface",
      "toFile": "Program.cs",
      "toTypeName": "SecondInterface",
      "usageType": "usage",
    },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > when the code contains extension method 1`] = `
{
  "metrics": Map {
  "ExtensionMethod.cs" => {
        "coupling_between_objects": 2,
        "incoming_dependencies": 1,
        "instability": 0.5,
        "outgoing_dependencies": 1,
      },
  "Program.cs" => {
          "coupling_between_objects": 1,
          "incoming_dependencies": 0,
          "instability": 1,
          "outgoing_dependencies": 1,
        },
  "Enum.cs" => {
            "coupling_between_objects": 1,
            "incoming_dependencies": 1,
            "instability": 0,
            "outgoing_dependencies": 0,
          },
  },
  "relationships": [
  {
        "fromTypeName": "ExtensionMethods2",
        "fromFQTN": "mainNamespace.ExtensionMethods2",
        "fromFile": "Program.cs",
        "toTypeName": "MyExtensions",
        "toFQTN": "ExtensionMethods.MyExtensions",
        "toFile": "ExtensionMethod.cs",
        "usageType": "usage",
      },
  {
          "fromTypeName": "MyExtensions",
          "fromFQTN": "ExtensionMethods.MyExtensions",
          "fromFile": "ExtensionMethod.cs",
          "toTypeName": "EnumType",
          "toFQTN": "EnumNamespace.EnumType",
          "toFile": "Enum.cs",
          "usageType": "usage",
        },
  ],
}
`;

exports[`C# metric tests > parsing C# dependencies should calculate the right dependencies and coupling metrics > when the code contains type conversion 1`] = `
{
  "metrics": Map {
    "ClassAFile.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 1,
      "instability": 0.5,
      "outgoing_dependencies": 1,
    },
    "ClassBFile.cs" => {
      "coupling_between_objects": 4,
      "incoming_dependencies": 3,
      "instability": 0.25,
      "outgoing_dependencies": 1,
    },
    "Program.cs" => {
      "coupling_between_objects": 2,
      "incoming_dependencies": 0,
      "instability": 1,
      "outgoing_dependencies": 2,
    },
  },
  "relationships": [
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "classANamespace.ClassA",
      "toFile": "ClassAFile.cs",
      "toTypeName": "ClassA",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "classBNamespace.ClassAFactory",
      "toFile": "ClassBFile.cs",
      "toTypeName": "ClassAFactory",
      "usageType": "usage",
    },
    {
      "fromFQTN": "ProgramNamespace.Program",
      "fromFile": "Program.cs",
      "fromTypeName": "Program",
      "toFQTN": "classBNamespace.ClassB",
      "toFile": "ClassBFile.cs",
      "toTypeName": "ClassB",
      "usageType": "usage",
    },
    {
      "fromFQTN": "classANamespace.ClassA",
      "fromFile": "ClassAFile.cs",
      "fromTypeName": "ClassA",
      "toFQTN": "classBNamespace.ClassB",
      "toFile": "ClassBFile.cs",
      "toTypeName": "ClassB",
      "usageType": "extends",
    },
    {
      "fromFQTN": "classBNamespace.ClassAFactory",
      "fromFile": "ClassBFile.cs",
      "fromTypeName": "ClassAFactory",
      "toFQTN": "classBNamespace.ClassB",
      "toFile": "ClassBFile.cs",
      "toTypeName": "ClassB",
      "usageType": "usage",
    },
  ],
}
`;
